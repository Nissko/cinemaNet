@page "/film-edit/{id:guid}"
@using global::Cinema.Client.DTO.Movie
@using global::Cinema.Client.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Фильм</PageTitle>

@if (_movie != null)
{
    <h3 class="fw-bold">@_movie.Title - редактирование</h3>

    <button @onclick="RedirectBack" class="btn btn-primary mb-3 mt-3">Назад</button>

    <form class="row g-3" @onsubmit="UpdateConfirmChanges">
        <div class="mb-3">
            <label for="titleFormControlInput" class="form-label">Название:</label>
            <input type="text" class="form-control" id="titleFormControlInput"
                   @bind="_movie.Title"/>
        </div>

        <div class="mb-3">
            <label for="descriptionFormControlInput" class="form-label">Описание:</label>
            <textarea class="form-control" id="descriptionFormControlInput" rows="3"
                      maxlength="1000" @bind="_movie.Description"></textarea>
        </div>

        <div class="mb-3">
            <label for="durationFormControlInput" class="form-label">Продолжительность (минуты):</label>
            <input type="number" class="form-control" id="durationFormControlInput"
                   min="0" max="300" @bind="_movie.Duration"/>
        </div>

        <div class="mb-3">
            <label for="ratingFormControlInput" class="form-label">Рейтинг:</label>
            <input type="number" class="form-control" id="ratingFormControlInput"
                   min="0" max="10" step="0.1"
                   @bind="_movie.Rating"/>
        </div>
        
        <div class="mb-3">
            <label for="imgFormControlInput" class="form-label">Обновить обложку:</label>
            <InputFile id="imgFormControlInput" class="form-control" OnChange="LoadNewImage"/>
        </div>
        
        <div class="mt-3">
            <div class="form-label">Предпросмотр старой обложки:</div>
            <img src="images_movies/@_movie.ImagePath" 
                 class="rounded img-thumbnail border shadow-sm" 
                 style="width: 250px; height: auto;" 
                 alt="Новая обложка" />
        </div>

        <div class="col-auto">
            <button type="submit" class="btn btn-primary mb-3">Изменить</button>
        </div>
    </form>
}
else
{
    <div role="status">Загрузка...</div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private MovieDTO? _movie;
    private IBrowserFile _newImage;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            _movie = await Http.GetFromJsonAsync<MovieDTO>($"api/Movie/{Id}");
        }
    }
    
    private void LoadNewImage(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            _newImage = e.File;
        }
    }

    /// <summary>
    ///     Обновление информации о фильме
    /// </summary>
    private async Task UpdateConfirmChanges()
    {
        string newImageUrl = _movie.ImagePath; // по умолчанию оставляем старую

        if (_newImage != null)
        {
            var formData = new MultipartFormDataContent();
            var fileContent = new StreamContent(_newImage.OpenReadStream(1024 * 1024));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_newImage.ContentType);
            formData.Add(fileContent, "file", _newImage.Name);

            var uploadResponse = await Http.PostAsync("api/Movie/upload", formData);

            if (uploadResponse.IsSuccessStatusCode)
            {
                newImageUrl = await uploadResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(_movie.ImagePath))
                {
                    await Http.DeleteAsync($"api/Movie/delete-image?filename={Uri.EscapeDataString(_movie.ImagePath)}");
                }
            }
            else
            {
                Console.Error.WriteLine("Ошибка при загрузке нового изображения.");
                return;
            }
        }
        
        var updateMovieDto = new UpdateMovieDto
        {
            Title = _movie.Title,
            Description = _movie.Description,
            Duration = TimeSpan.FromMinutes(double.Parse(_movie.Duration)),
            Rating = _movie.Rating,
            ImagePath = newImageUrl
        };

        var response = await Http.PutAsJsonAsync($"api/Movie/{Id}", updateMovieDto);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/films");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Ошибка: {error}");
        }
    }

    /// <summary>
    /// Редирект назад
    /// </summary>
    private async Task RedirectBack(MouseEventArgs mouseEventArgs)
    {
        NavigationManager.NavigateTo("/films");
    }
}