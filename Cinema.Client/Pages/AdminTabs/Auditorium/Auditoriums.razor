@page "/auditoriums"
@using global::Cinema.Client.DTO.Auditorium
@using global::Cinema.Client.DTO.Cinema
@using global::Cinema.Client.DTO.Seat
@using global::Cinema.Client.Services
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Залы</PageTitle>

<h1>Залы</h1>
<div class="mt-3 mb-3">
    <a href="auditorium-add" class="btn btn-primary">Добавить зал</a>
</div>

@if (_errorMessage.Length > 0 && _errorMessage != string.Empty)
{
    <div class="mt-4 mb-4 alert alert-danger">@_errorMessage</div>
}

<div class="d-flex flex-row align-items-center flex-wrap justify-content-start gap-4">
    @if (_auditoriums.Count > 0)
    {
        @foreach (var auditorium in _auditoriums)
        {
            <div class="card h-100 d-flex flex-column 
                    @(_auditoriumToDelete.Contains(auditorium.Id) ? "fade-out" : "")"
                 style="width: 18.5rem;" @key="auditorium.Id">
                <div class="card-body">
                    <h5 class="card-title d-flex align-items-center fw-bold" style="min-height: 2em; max-height: 2em;">
                        Зал №@auditorium.Number
                    </h5>
                    <p class="card-text text-truncate" style="max-height: 2.5em; overflow: hidden;">
                        Количество рядов - @auditorium.RowsCount
                    </p>
                    <p class="card-text text-truncate" style="max-height: 2.5em; overflow: hidden;">
                        Мест в ряду - @auditorium.SeatsPerRow
                    </p>
                    <div class="d-flex mt-2">
                        <a href="auditorium-edit/@auditorium.Id" class="btn btn-secondary w-100">Изменить</a>
                    </div>
                    <div class="d-flex mt-2">
                        <button @onclick="OpenModal" class="btn btn-secondary w-100">Места</button>
                    </div>
                    <!-- Модальное окно -->
                    @if (showModal)
                    {
                        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5)" @onclose="CloseModal">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Места в зале</h5>
                                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                                    </div>
                                    <div class="modal-body">
                                        @if (_seatsSort == null || !_seatsSort.Any())
                                        {
                                            <p>Нет доступных мест</p>
                                        }
                                        else
                                        {
                                            <div class="row g-3">
                                                @foreach (var seat in _seatsSort)
                                                {
                                                    <div class="col-md-2">
                                                        <div class="card  @(IsBooked(seat) ? "text-danger" : "text-success")">
                                                            <div class="card-body text-center">
                                                                <p class="card-text">@seat.RowNumber ряд, @seat.SeatNumber место</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-secondary" @onclick="CloseModal">Закрыть</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="d-flex mt-2">
                        <button @onclick="() => DeleteAuditorium(auditorium.Id)" class="btn btn-danger w-100">Удалить
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    else if (_auditoriums.Count == 0)
    {
        <div class="mt-4 text-muted">Нет залов для этого кинотеатра</div>
    }
</div>



@code {
    private CinemaDTO[]? _cinemas;
    private SeatDTO[]? _seat;
    private List<SeatDTO> _seatsSort = new();
    private HashSet<Guid> _auditoriumToDelete = new();
    private List<AuditoriumDTO> _auditoriums = new();
    private string _errorMessage = string.Empty;
    private bool showModal = false;
    
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            await LoadCinemas();
            await LoadAuditoriums();
        }
    }
    
    private async Task LoadCinemas()
    {
        _cinemas = await Http.GetFromJsonAsync<CinemaDTO[]>("Cinema");
        StateHasChanged();
    }
    
    public async Task LoadAuditoriums()
    {
        _auditoriums = await Http.GetFromJsonAsync<List<AuditoriumDTO>>($"Auditorium/by-cinema/{_cinemas.FirstOrDefault().Id}") ?? new();
        _seat = await Http.GetFromJsonAsync<SeatDTO[]>("Seat");
        _seatsSort = _seat
            .OrderBy(s => s.RowNumber)
            .ThenBy(s => s.SeatNumber).ToList();
        StateHasChanged();
    }
    
    private async Task DeleteAuditorium(Guid auditoriumId)
    {
        if (auditoriumId != Guid.Empty)
        {
            _errorMessage = string.Empty;
            _auditoriumToDelete.Add(auditoriumId);
            StateHasChanged();

            await Task.Delay(500);
            
            var response = await Http.DeleteAsync($"Auditorium/{auditoriumId}");
            StateHasChanged();
            
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                _errorMessage = error;
                
                /*очищаем список*/
                _auditoriumToDelete.Clear();
                StateHasChanged();
                
                Console.Error.WriteLine($"Ошибка: {error}");
            }
        }
    }
    
    private void OpenModal()
    {
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }
    
    //TODO:
    // Логика для определения, занято ли место, сделать
    private bool IsBooked(SeatDTO seat)
    {
        return false;
    }
}