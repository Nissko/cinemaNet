@page "/auditorium-add"
@using global::Cinema.Client.DTO.Auditorium
@using global::Cinema.Client.DTO.Cinema
@using global::Cinema.Client.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Зал</PageTitle>

<h1>Добавление нового зала</h1>

<button @onclick="RedirectBack" class="btn btn-primary mb-3 mt-3">Назад</button>

<form class="row g-3" @onsubmit="CreateNewAud">
    <div class="mb-3">
        <label for="NumberFormControlInput" class="form-label">Номер зала:</label>
        <input required="" type="number" class="form-control" id="NumberFormControlInput" min="1" maxlength="100" 
               @bind="_newAuditorium.Number"/>
    </div>
    
    <div class="mb-3">
        <label for="RowsCountFormControlInput" class="form-label">Кол-во рядов:</label>
        <input required="" type="number" class="form-control" id="RowsCountFormControlInput" min="1" maxlength="100" 
               @bind="_newAuditorium.RowsCount"/>
    </div>
    
    <div class="mb-3">
        <label for="SeatsPerRowFormControlInput" class="form-label">Мест в ряду:</label>
        <input required="" type="number" class="form-control" id="SeatsPerRowFormControlInput" min="1" maxlength="100" 
               @bind="_newAuditorium.SeatsPerRow"/>
    </div>
    
    <div class="mb-3">
        <label for="cinemaFormControlInput" class="form-label">Кинотеатр:</label>
        <select @bind="_newAuditorium.CinemaId" class="form-control" id="cinemaFormControlInput">
            @if (_cinemas != null)
            {
                <option selected="" disabled="">Выберите место</option>
                @foreach (var cinema in _cinemas)
                {
                    <option value="@cinema.Id">@cinema.Name</option>
                }
            }
            else
            {
                <option>Добавьте кинотеатры</option>
            }
        </select>
    </div>
    
    <div class="col-auto">
        <button type="submit" class="btn btn-primary mb-3">Добавить</button>
    </div>
</form>

@code {
    private CinemaDTO[]? _cinemas;
    private AuditoriumDTO _newAuditorium = new();
    
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            await LoadCinemas();
        }
    }
    
    private async Task LoadCinemas()
    {
        _cinemas = await Http.GetFromJsonAsync<CinemaDTO[]>("Cinema");
        StateHasChanged();
    }
    
    private async Task CreateNewAud()
    {
        var dtoToTransfer = new CreateAuditoriumDTO()
        {
            Number = _newAuditorium.Number,
            RowsCount = _newAuditorium.RowsCount,
            SeatsPerRow = _newAuditorium.SeatsPerRow,
            CinemaId = _newAuditorium.CinemaId
        };
        
        var response = await Http.PostAsJsonAsync("Auditorium", dtoToTransfer);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/auditoriums");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Ошибка: {error}");
        }
    }
    
    /// <summary>
    /// Редирект назад
    /// </summary>
    private async Task RedirectBack()
    {
        NavigationManager.NavigateTo("/auditoriums");
    }
}