@page "/cinemas"
@using global::Cinema.Client.DTO.Cinema
@using global::Cinema.Client.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Кинотеатр</PageTitle>

<h1>Кинотеатр</h1>
@if (_cinemas!=null && _cinemas.Length == 0)
{
    <div class="mt-3 mb-3">
        <a href="cinema-add" class="btn btn-primary">Добавить кинотеатр</a>
    </div>
}

<div class="d-flex flex-row align-items-center flex-wrap justify-content-start gap-4">
    @if (_cinemas != null)
    {
        @foreach (var cinema in _cinemas)
        {
            <div class="card h-100 d-flex flex-column 
                @((_cinemaToDelete.Contains(cinema.Id) ? "fade-out" : ""))" 
                 style="width: 18.5rem;" @key="cinema.Id">
                <div class="card-body">
                    <h5 class="card-title d-flex align-items-center fw-bold" style="min-height: 2em; max-height: 2em;">
                        @cinema.Name
                    </h5>
                    <p class="card-text text-truncate" style="max-height: 2.5em; overflow: hidden;">
                        @cinema.Address
                    </p>
                    <div class="d-flex mt-2">
                        <a href="cinema-edit/@cinema.Id" class="btn btn-secondary w-100">Изменить</a>
                    </div>
                    <div class="d-flex mt-2">
                        <button @onclick="() => DeleteCinema(cinema.Id)" class="btn btn-danger w-100">Удалить</button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div role="status">Загрузка...</div>
    }
</div>

@code {
    private CinemaDTO[]? _cinemas;
    private HashSet<Guid> _cinemaToDelete = new();

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            await LoadCinemas();
        }
    }
    
    private async Task LoadCinemas()
    {
        _cinemas = await Http.GetFromJsonAsync<CinemaDTO[]>("Cinema");
        StateHasChanged();
    }
    
    private async Task DeleteCinema(Guid cinemaId)
    {
        if (cinemaId != Guid.Empty)
        {
            _cinemaToDelete.Add(cinemaId);
            StateHasChanged();

            await Task.Delay(500);
            
            var response = await Http.DeleteAsync($"Cinema/{cinemaId}");
            
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Ошибка: {error}");
            }
        }
    }
}