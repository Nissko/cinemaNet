@page "/screenings"
@using global::Cinema.Client.DTO.Screening
@using global::Cinema.Client.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Премьеры</PageTitle>

<h1>Премьеры</h1>
<div class="mt-3 mb-3">
    <a href="screening-add" class="btn btn-primary">Добавить показ фильма</a>
</div>

@if (_allScreenings == null)
{
    <div role="status">Загрузка фильмов...</div>
}
else
{
    <select class="form-select mb-3" @onchange="LoadScreenings">
        <option selected disabled>Выберите фильм</option>
        @foreach (var movie in _allScreenings.DistinctBy(t=>t.Movie.Title))
        {
            <option value="@movie.Movie.Id">@movie.Movie.Title</option>
        }
    </select>
}

@if (_screeningGroups.Count > 0)
{
    @foreach (var group in _screeningGroups)
    {
        <h5 class="mt-4">@group.Key.ToString("dd.MM.yyyy")</h5>
        <div class="d-flex flex-row align-items-center flex-wrap justify-content-start gap-4 mb-5">
            @foreach (var screening in group)
            {
                <div class="card h-100 d-flex flex-column 
                    @(_screeningToDelete.Contains(screening.Id) ? "fade-out" : "")"
                     style="width: 18.5rem;" @key="screening.Id">
                    <div class="card-body">
                        <h5 class="card-title fw-bold">@screening.Movie.Title</h5>
                        <p class="card-text">Время: @screening.StartTime.ToString("HH:mm")</p>
                        <p class="card-text">Зал: @screening.Auditorium.Number</p>
                        <p class="card-text">Цена за билет: @screening.Price</p>
                        <div class="d-flex mt-2">
                            <a href="screening-edit/@screening.Id" class="btn btn-secondary w-100">Изменить</a>
                        </div>
                        <div class="d-flex mt-2">
                            <button @onclick="() => DeleteScreening(screening.Id)" class="btn btn-danger w-100">Удалить</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}
else if (_screeningList.Count == 0)
{
    <div class="mt-4 text-muted">Нет показов для этого фильма в этом месяце</div>
}

@code {
    /*Все премьеры*/
    private ScreeningDTO[]? _allScreenings;
    private HashSet<Guid> _screeningToDelete = new();
    /*премьеры по фильму*/
    private List<ScreeningDTO> _screeningList = new();
    /*сгруппированные премьеры*/
    private List<IGrouping<DateTime, ScreeningDTO>> _screeningGroups = new();
    
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            await LoadAllScreenings();
        }
    }
    
    private async Task LoadAllScreenings()
    {
        _allScreenings = await Http.GetFromJsonAsync<ScreeningDTO[]>("Screening");

        var today = DateTime.Today;
        var startDate = today.AddDays(-14);

        _allScreenings = _allScreenings?
            .Where(s => s.StartTime >= startDate && s.StartTime <= today.AddDays(30))
            .ToArray();

        StateHasChanged();
    }
    
    public Task LoadScreenings(ChangeEventArgs args)
    {
        if (Guid.TryParse(args.Value?.ToString(), out var movieId) && movieId != Guid.Empty)
        {
            // Фильтруем по фильму и группируем по дате
            var filtered = _allScreenings
                .Where(t => t.Movie.Id == movieId)
                .GroupBy(t => t.StartTime.Date)
                .OrderBy(g => g.Key)
                .ToList();

            // Очистка старого списка
            _screeningList = filtered.SelectMany(g => g).ToList();
            _screeningGroups = filtered;
        }
        else
        {
            _screeningGroups = new();
            _screeningList = new();
        }

        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private async Task DeleteScreening(Guid screeningId)
    {
        if (screeningId != Guid.Empty)
        {
            _screeningToDelete.Add(screeningId);
            StateHasChanged();

            await Task.Delay(500);
            
            var response = await Http.DeleteAsync($"Screening/{screeningId}");
            
            _screeningList.RemoveAll(s => s.Id == screeningId);
            _screeningGroups = _screeningList
                .GroupBy(s => s.StartTime.Date)
                .OrderBy(g => g.Key)
                .ToList();

            _screeningToDelete.Remove(screeningId);
            StateHasChanged();
            
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Ошибка: {error}");
            }
        }
    }
}