@page "/screening-add"
@using global::Cinema.Client.DTO.Auditorium
@using global::Cinema.Client.DTO.Movie
@using global::Cinema.Client.DTO.Screening
@using global::Cinema.Client.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Показ</PageTitle>

<h1>Добавление нового показа</h1>

<button @onclick="RedirectBack" class="btn btn-primary mb-3 mt-3">Назад</button>

<form class="row g-3" @onsubmit="CreateNewCinema">
    <div class="mb-3">
        <label class="form-label">Дата показа:</label>
        <div class="input-group">
            <InputDate @bind-Value="_dateInput" class="form-control" />
            <input type="time" @bind="_timeInput" class="form-control" />
        </div>
    </div>
    
    <div class="mb-3">
        <label class="form-label" for="ticketPriceInput">Цена билета:</label>
        <div>
            <input id="ticketPriceInput" class="form-control" type="number" @bind="_newScreening.Price" min="100" max="1000"/>
        </div>
    </div>
    
    <div class="mb-3">
        <label for="zalFormControlInput" class="form-label">Зал:</label>
        @if (_auditoriumDto == null)
        { 
            <div role="status">Загрузка фильмов...</div>
        }
        else
        {
            <select required class="form-control" id="zalFormControlInput" rows="3" @bind="_newScreening.Auditorium.Id">
                <option selected="" disabled="">Выберите зал</option>
                @foreach (var aud in _auditoriumDto)
                {
                    <option value="@aud.Id">Зал "@aud.Number"</option>
                }
            </select>
        }
    </div>
    
    <div class="mb-3">
        <label for="filmFormControlInput" class="form-label">Фильм:</label>
        @if (_movieDto == null)
        { 
            <div role="status">Загрузка фильмов...</div>
        }
        else
        {
            <select required class="form-control" id="filmFormControlInput" rows="3" @bind="_newScreening.Movie.Id">
                <option selected="" disabled="">Выберите фильм</option>
                @foreach (var movie in _movieDto)
                {
                    <option value="@movie.Id">Зал "@movie.Title"</option>
                }
            </select>
        }
    </div>
    
    @if (_errorMessage.Length > 0)
    {
        <div class="alert alert-danger">
            @_errorMessage
        </div>
    }
    

    <div class="col-auto">
        <button type="submit" class="btn btn-primary mb-3">Добавить</button>
    </div>
</form>

@code {
    private ScreeningDTO _newScreening = new ()
    {
        Auditorium = new (),
        Movie = new ()
    };
    private AuditoriumDTO[]? _auditoriumDto;
    private MovieDTO[]? _movieDto;

    private string _errorMessage = string.Empty;
    private DateOnly _dateInput = DateOnly.FromDateTime(DateTime.Parse(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).ToString()));
    private TimeOnly _timeInput = TimeOnly.FromDateTime(DateTime.Parse(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).ToString()));
    
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsUserAuthenticated();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            _auditoriumDto = await Http.GetFromJsonAsync<AuditoriumDTO[]?>("Auditorium");
            _movieDto = await Http.GetFromJsonAsync<MovieDTO[]?>("Movie");
        }
    }
    
    private async Task CreateNewCinema()
    {
        var dateTimeFromInputs = new DateTime(_dateInput, _timeInput);
        var dtoToTransfer = new CreateScreeningDTO()
        {
            StartTime = DateTime.SpecifyKind(dateTimeFromInputs, DateTimeKind.Utc),
            AuditoriumId = _newScreening.Auditorium.Id,
            MovieId = _newScreening.Movie.Id,
            Price = _newScreening.Price
        };
        
        var response = await Http.PostAsJsonAsync("Screening", dtoToTransfer);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/screenings");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            _errorMessage = error;
            Console.Error.WriteLine($"Ошибка: {error}");
        }
    }
    
    /// <summary>
    /// Редирект назад
    /// </summary>
    private async Task RedirectBack()
    {
        NavigationManager.NavigateTo("/screenings");
    }
}