@page "/"
@using System.Globalization
@using Cinema.Client.DTO.Screening
@using Cinema.Client.DTO.Seat
@using Cinema.Client.DTO.Ticket
@using Cinema.Client.Services
@using Cinema.Client.Services.JwtService
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject JwtService JwtServices

<div class="h4 fw-bold mb-3">Показы:</div>
<div class="d-flex flex-wrap gap-2 mb-4">
    <button class="btn btn-outline-primary rounded-pill px-3"
            @onclick="() => LoadScreeningsForDay(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).Date)">
        Сегодня
    </button>
    <button class="btn btn-outline-primary rounded-pill px-3"
            @onclick="() => LoadScreeningsForDay(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).Date.AddDays(1))">
        Завтра
    </button>
    <button class="btn btn-outline-primary rounded-pill px-3"
            @onclick="() => LoadScreeningsForDay(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).Date.AddDays(2))">
        @GetDayName(2)
    </button>
    <button class="btn btn-outline-primary rounded-pill px-3"
            @onclick="() => LoadScreeningsForDay(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).Date.AddDays(3))">
        @GetDayName(3)
    </button>
    <button class="btn btn-outline-primary rounded-pill px-3"
            @onclick="() => LoadScreeningsForDay(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).Date.AddDays(4))">
        @GetDayName(4)
    </button>
</div>

@if (_allScreenings != null && _allScreenings.Length > 0 && _screeningGroups.Any())
{
    <div class="mt-4 fs-5 text-muted">Показы на
        &laquo;@_allScreenings.FirstOrDefault().StartTime.ToString("dd.MM.yy")&raquo;
    </div>
    <div class="row g-4 mt-2">
        @foreach (var group in _screeningGroups)
        {
            var firstMovie = group.FirstOrDefault();
            var movieTitle = firstMovie?.Movie?.Title ?? group.Key;
            <div class="col-12 col-sm-6 col-lg-4">
                <div class="card shadow-sm h-100 border-0 rounded-3 overflow-hidden d-flex flex-column">
                    <div class="row g-0">
                        <div class="col-md-5">
                            @if (firstMovie != null && firstMovie.Movie != null)
                            {
                                <img src="images_movies/@firstMovie.Movie.ImagePath"
                                     class="img-fluid w-100 h-auto"
                                     style="min-height: 180px; object-fit: cover;"
                                     alt="Обложка фильма">
                            }
                        </div>
                        <div class="col-md-7">
                            <div class="card-body d-flex flex-column p-3">
                                <h5 class="card-title mb-2" style="min-height: 70px">@movieTitle</h5>
                                <p class="text-muted small mb-2">
                                    @foreach (var audToDay in group.GroupBy(t => t.Auditorium.Number))
                                    {
                                        <span>Зал @audToDay.Key</span>
                                        <br/>
                                    }
                                </p>
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var screening in group)
                                    {
                                        if (screening.StartTime.TimeOfDay < DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).TimeOfDay &&
                                            screening.StartTime.Date == DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).Date)
                                        {
                                            <button
                                                class="btn btn-secondary btn-sm disabled">@screening.StartTime.ToString("HH:mm")</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary btn-sm"
                                                    @onclick="() => LoadSeats(screening.Auditorium.Id, movieTitle, screening.Id, screening.Price)">
                                                @screening.StartTime.ToString("HH:mm")
                                            </button>
                                        }
                                    }
                                </div>
                                <hr class="my-2 flex-grow-1"/>
                                <button class="btn btn-outline-primary btn-sm mt-auto align-self-start"
                                        @onclick="() => OpenModalTrailer(movieTitle)">
                                    <i class="bi bi-camera-reels me-1"></i>Смотреть трейлер
                                </button>
                            </div>
                        </div>
                    </div>

                    @if (currentTrailerMovie == movieTitle)
                    {
                        <div class="modal fade show d-block" tabindex="-1"
                             style="background-color: rgba(0,0,0,0.8);">
                            <div class="modal-dialog modal-xl modal-dialog-centered">
                                <div class="modal-content rounded-4 border-0 shadow-lg">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Трейлер фильма &laquo;@movieTitle&raquo;</h5>
                                        <button type="button" class="btn-close"
                                                @onclick="CloseModalTrailer"></button>
                                    </div>
                                    <div class="modal-body text-center">
                                        <video class="w-100 rounded-3" controls>
                                            <source src="videoplayback.mp4" type='video/mp4'>
                                        </video>
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-secondary" @onclick="CloseModalTrailer">Закрыть
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (currentSeatModalForAuditoriumId.HasValue)
                    {
                        <div class="modal fade show d-block" tabindex="-1"
                             style="background-color: rgba(0,0,0,0.8);">
                            <div class="modal-dialog modal-dialog-centered modal-lg">
                                <div class="modal-content rounded-4 border-0 shadow-lg">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Выберите места —
                                            &laquo;@currentSeatModalMovieTitle&raquo;</h5>
                                        <button type="button" class="btn-close"
                                                @onclick="CloseModalSeat"></button>
                                    </div>
                                    <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                                        @if (_seatsSort == null || !_seatsSort.Any())
                                        {
                                            <div class="alert alert-warning text-center">Нет доступных мест
                                            </div>
                                        }
                                        else
                                        {
                                            foreach (var row in _seatsSort
                                                             .Where(s => s.AuditoriumId == currentSeatModalForAuditoriumId)
                                                             .GroupBy(s => s.RowNumber).OrderBy(g => g.Key))
                                            {
                                                <div class="mb-3">
                                                    <h6 class="fw-bold text-center">Ряд @row.Key</h6>
                                                    <div class="d-flex justify-content-center flex-wrap gap-1">
                                                        @foreach (var seat in row.OrderBy(s => s.SeatNumber))
                                                        {
                                                            <button class="btn btn-sm rounded-circle
                                                        @(IsBooked(seat) ? "btn-danger disabled" : _seatsGuids.Contains(seat.Id) ? "btn-primary" : "btn-outline-success")
                                                "
                                                                    style="width: 36px; height: 36px;"
                                                                    disabled="@IsBooked(seat)"
                                                                    @onclick="() => SelectSeat(seat.Id)">
                                                                @seat.SeatNumber
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <div class="modal-footer">
                                        @if (_seatsGuids.Count > 0)
                                        {
                                            <div class="me-auto">
                                                Выбрано мест: @_seatsGuids.Count •
                                                Сумма: @(string.Format("{0:F2}", _seatsGuids.Count * currenSeatModalPrice)) ₽
                                            </div>
                                        }
                                        <button class="btn btn-secondary" @onclick="CloseModalSeat">Закрыть
                                        </button>
                                        @if (_isAuth && _seatsGuids.Count > 0)
                                        {
                                            <button class="btn btn-success" @onclick="BuyTickets">
                                                Забронировать
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-info mt-4">Нет показов на этот день.</div>
}

@code {
    private HubConnection _hubConnection;
    private ScreeningDTO[]? _allScreenings;
    private SeatDTO[]? _seatDto;
    private TicketDTO[]? _ticketDtos;
    private List<SeatDTO> _seatsSort = new();
    private List<IGrouping<string, ScreeningDTO>> _screeningGroups = new();
    private List<Guid> _seatsGuids = new();
    private bool _isAuth;
    private readonly List<Guid> _bookedSeats = new();

    private string? currentTrailerMovie;
    private Guid? currentSeatModalForAuditoriumId;
    private Guid? currentSeatScreeningId;
    private string? currentSeatModalMovieTitle;
    private decimal? currenSeatModalPrice;

    protected override async Task OnInitializedAsync()
    {
        _isAuth = await AuthService.IsUserAuthenticated();

        await LoadScreeningsForDay(DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)));
        await ConnectToHub();
    }

    private async Task LoadScreeningsForDay(DateTimeOffset day)
    {
        _allScreenings = await Http.GetFromJsonAsync<ScreeningDTO[]>($"Screening/by-day/{day}");
        var today = day.Date;
        _allScreenings = _allScreenings?
            .Where(s => s.StartTime.Date == today)
            .ToArray();

        if (_allScreenings != null)
        {
            var filtered = _allScreenings
                .GroupBy(t => t.Movie.Title)
                .OrderBy(g => g.Key)
                .ToList();
            _screeningGroups = filtered;
        }

        StateHasChanged();
    }

    private string GetDayName(int daysFromToday)
    {
        var culture = new CultureInfo("ru-RU");
        var dayName = DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(5)).AddDays(daysFromToday).ToString("dddd", culture);
        return culture.TextInfo.ToTitleCase(dayName);
    }

    private async void LoadSeats(Guid auditoriumId, string movieTitle, Guid screeningId, decimal scrPrice)
    {
        _bookedSeats.Clear();
        _seatsSort.Clear();
        _seatsGuids.Clear();
        currentSeatModalForAuditoriumId = null;
        currentSeatModalMovieTitle = null;
        currentSeatScreeningId = null;
        currenSeatModalPrice = null;

        _seatDto = await Http.GetFromJsonAsync<SeatDTO[]?>($"Seat/by-auditorium/{auditoriumId}");
        _seatsSort = _seatDto?
            .OrderBy(s => s.RowNumber)
            .ThenBy(s => s.SeatNumber)
            .ToList() ?? new List<SeatDTO>();

        currentSeatModalForAuditoriumId = auditoriumId;
        currentSeatModalMovieTitle = movieTitle;
        currentSeatScreeningId = screeningId;
        currenSeatModalPrice = scrPrice;

        await LoadBookedSeats(screeningId);
        StateHasChanged();
    }

    private async Task LoadBookedSeats(Guid screeningId)
    {
        if (currentSeatScreeningId != null && screeningId == currentSeatScreeningId.Value)
        {
            _ticketDtos = await Http.GetFromJsonAsync<TicketDTO[]?>($"Ticket/by-screening/{screeningId}");

            if (_ticketDtos != null)
            {
                _bookedSeats.AddRange(_ticketDtos.Select(t => t.SeatId));
            }
        }
    }

    private void OpenModalTrailer(string movieTitle)
    {
        currentTrailerMovie = movieTitle;
        StateHasChanged();
    }

    private void CloseModalTrailer()
    {
        currentTrailerMovie = null;
        StateHasChanged();
    }

    private void CloseModalSeat()
    {
        currentSeatModalForAuditoriumId = null;
        currentSeatModalMovieTitle = null;
        currentSeatScreeningId = null;
        currenSeatModalPrice = null;
        _seatsGuids.Clear();
        StateHasChanged();
    }

    private bool IsBooked(SeatDTO seat)
    {
        foreach (var bookedSeat in _bookedSeats)
        {
            if (bookedSeat == seat.Id)
            {
                return true;
            }
        }

        return false;
    }

    private void SelectSeat(Guid seatId)
    {
        if (_seatsGuids.Contains(seatId))
        {
            _seatsGuids.Remove(seatId);
        }
        else
        {
            _seatsGuids.Add(seatId);
        }
    }

    private async Task<UserInfo> GetUserInfo()
    {
        return await JwtServices.GetUserInfoFromToken();
    }

    //TODO:реализовать
    //Нужные данные о пользователе, зале и фильме
    private async Task BuyTickets()
    {
        var userInfo = await GetUserInfo();
        var makeDto = new BookTicketDTO
        {
            ScreeningId = (Guid)currentSeatScreeningId!,
            SeatId = _seatsGuids,
            UserEmail = userInfo.Email,
            Price = (decimal)currenSeatModalPrice!
        };

        var response = await Http.PostAsJsonAsync("Ticket/book", makeDto);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<List<Guid>>();

            if (result != null)
            {
                _bookedSeats.AddRange(result);
            }
        }

        CloseModalSeat();
    }

    private async Task ConnectToHub()
    {
        //TODO: указание Dev/Host
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://aib-cinema.ru/api/hub/eventsMainHub"))
            //.WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5294/hub/eventsMainHub"))
            .Build();

        _hubConnection.On<Guid>("ReceiveSeatsUpdate", async id =>
        {
            _seatsGuids = new List<Guid>();
            await LoadBookedSeats(id);
            StateHasChanged();
        });

        try
        {
            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Ошибка подключения к SignalR: {ex.Message}");
        }
    }

}